import dotenv from "dotenv";
dotenv.config();

import express from "express";
import { Bot, Keyboard } from "grammy";

const PORT = process.env.PORT || 3000;
const token = process.env.TELEGRAM_TOKEN;

if (!token) {
  console.error("‚õî –í .env –Ω–µ—Ç TELEGRAM_TOKEN");
  process.exit(1);
}

// --- Express (–ø—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫) ---
const app = express();
app.use(express.urlencoded({ extended: true })); 
// —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ <form>

app.get("/", (_req, res) => res.send("–°–µ—Ä–≤–µ—Ä –∂–∏–≤ ‚úÖ"));
app.get("/health", (_req, res) => res.json({ ok: true, t: Date.now() }));
// —Å—Ç—Ä–∞–Ω–∏—Ü–∞ "–ö–∞–±–∏–Ω–µ—Ç" –ø–æ –∞–¥—Ä–µ—Å—É /app
app.get("/app", (_req, res) => {
  res.send(`<!doctype html>
<html lang="ru"><head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>–ö–∞–±–∏–Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞</title>
<style>
  :root{--brand:#f37021;--bg:#0f1115;--card:#161a22;--text:#e9edf3;--muted:#aab3c2}
  *{box-sizing:border-box} body{margin:0;background:var(--bg);color:var(--text);
  font:16px/1.5 Montserrat,system-ui,Segoe UI,Roboto,Arial,sans-serif}
  .wrap{max-width:900px;margin:0 auto;padding:24px}
  h1{margin:0 0 16px}
  .card{background:var(--card);border:1px solid rgba(255,255,255,.08);
    border-radius:16px;padding:16px;margin:12px 0}
  .row{display:flex;gap:10px;flex-wrap:wrap}
  .badge{display:inline-block;padding:4px 10px;border-radius:999px;
    background:rgba(243,112,33,.18);color:var(--brand);font-weight:700}
  .btn{display:inline-block;background:var(--brand);color:#fff;text-decoration:none;
    border-radius:12px;padding:10px 14px;font-weight:700;margin-top:8px}
  small{color:var(--muted)}
</style>
</head>
<body>
  <div class="wrap">
    <h1>–ö–∞–±–∏–Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞</h1>
    <div class="card">
      <h3>–ú–æ–π –ø—Ä–æ–µ–∫—Ç</h3>
      <div class="row">
        <span class="badge">–¢–ó</span>
        <span class="badge">–ò–¥–µ–∏</span>
        <span class="badge">–°—Ü–µ–Ω–∞—Ä–∏–π</span>
        <span class="badge">–ß–µ—Ä–Ω–æ–≤–∏–∫</span>
        <span class="badge">–§–∏–Ω–∞–ª</span>
      </div>
      <a class="btn" href="#">–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¢–ó (—Å–∫–æ—Ä–æ)</a>
      <p><small>–≠—Ç–æ MVP-—Å—Ç—Ä–∞–Ω–∏—Ü–∞. –ü–æ–∑–∂–µ –ø–æ–¥–º–µ–Ω–∏–º –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.</small></p>
    </div>
  </div>
</body></html>`);
});
// === –ë—Ä–∏—Ñ ===
// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π
app.get("/brief", (_req, res) => {
  res.send(`<!doctype html>
<html lang="ru"><head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>–ó–∞–ø–æ–ª–Ω–∏—Ç—å –±—Ä–∏—Ñ</title>
<style>
  :root{--brand:#f37021;--bg:#0f1115;--card:#161a22;--text:#e9edf3;--muted:#aab3c2}
  *{box-sizing:border-box} body{margin:0;background:var(--bg);color:var(--text);font:16px/1.5 system-ui,Segoe UI,Roboto,Arial}
  .wrap{max-width:780px;margin:0 auto;padding:24px}
  h1{margin:0 0 16px}
  form{background:var(--card);border:1px solid rgba(255,255,255,.08);border-radius:16px;padding:16px}
  label{display:block;margin:10px 0 6px;color:var(--muted)}
  input,textarea,select{width:100%;padding:10px;border-radius:10px;border:1px solid rgba(255,255,255,.12);background:#0f1219;color:#fff}
  textarea{min-height:120px}
  .row{display:grid;grid-template-columns:1fr 1fr;gap:12px}
  .btn{margin-top:14px;display:inline-block;background:var(--brand);color:#fff;border:none;border-radius:12px;padding:12px 16px;font-weight:700;cursor:pointer}
  a{color:#8db7ff}
</style>
</head>
<body>
  <div class="wrap">
    <h1>–ë—Ä–∏—Ñ –Ω–∞ –≤–∏–¥–µ–æ</h1>
    <form method="post" action="/brief">
      <label>–ö–æ–º–ø–∞–Ω–∏—è/–±—Ä–µ–Ω–¥</label>
      <input name="company" placeholder="–û–û–û ¬´–†–æ–º–∞—à–∫–∞¬ª" required />

      <label>–¶–µ–ª—å —Ä–æ–ª–∏–∫–∞</label>
      <textarea name="goal" placeholder="–ü—Ä–æ–¥–∞–∂–∏, –∑–∞—è–≤–∫–∞, –∏–º–∏–¥–∂, –æ–±—É—á–µ–Ω–∏–µ..." required></textarea>

      <div class="row">
        <div>
          <label>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è</label>
          <input name="audience" placeholder="–ö—Ç–æ? –í–æ–∑—Ä–∞—Å—Ç? –ì–µ–æ? –ò–Ω—Ç–µ—Ä–µ—Å—ã?" />
        </div>
        <div>
          <label>–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ (—Å–µ–∫)</label>
          <input name="duration" type="number" min="5" max="600" placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, 30" />
        </div>
      </div>

      <label>–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å/—Å—Ç–∏–ª—å</label>
      <input name="tone" placeholder="–°–µ—Ä—å—ë–∑–Ω–æ, —Å —é–º–æ—Ä–æ–º, –¥—Ä–∞–π–≤–æ–≤–æ..." />

      <label>–†–µ—Ñ–µ—Ä–µ–Ω—Å—ã (—Å—Å—ã–ª–∫–∏)</label>
      <textarea name="refs" placeholder="https://youtu.be/...; https://vimeo.com/..."></textarea>

      <div class="row">
        <div>
          <label>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ</label>
          <input name="contact" placeholder="–ò–º—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å" />
        </div>
        <div>
          <label>–¢–µ–ª–µ–≥—Ä–∞–º/–ø–æ—á—Ç–∞</label>
          <input name="contact_way" placeholder="@username –∏–ª–∏ email" />
        </div>
      </div>

      <button class="btn" type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±—Ä–∏—Ñ</button>
    </form>
    <p><a href="/app">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç</a></p>
  </div>
</body></html>`);
});

// –ü—Ä–∏—ë–º —Ñ–æ—Ä–º—ã
app.post("/brief", (req, res) => {
  // –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º ‚Äî –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –ë–î
  console.log("üìù –ù–æ–≤—ã–π –±—Ä–∏—Ñ:", req.body);
  res.send(`<!doctype html><html lang="ru"><meta charset="utf-8"><body style="font:16px system-ui;background:#0f1115;color:#e9edf3">
  <div style="max-width:760px;margin:40px auto">
    <h1>–°–ø–∞—Å–∏–±–æ! –ë—Ä–∏—Ñ –ø–æ–ª—É—á–µ–Ω ‚úÖ</h1>
    <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
    <p><a href="/app" style="color:#8db7ff">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç</a></p>
  </div></body></html>`);
});


// --- Telegram Bot ---
const bot = new Bot(token);

bot.command("start", async (ctx) => {
  const kb = new Keyboard().text("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç (–ø–æ–∑–∂–µ)").resized();
  await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || "–¥—Ä—É–≥"}! –Ø –Ω–∞ —Å–≤—è–∑–∏ ‚úÖ`, { reply_markup: kb });
});

bot.command("ping", (ctx) => ctx.reply("pong ‚úÖ"));
bot.on("message", (ctx) => console.log("üì©", ctx.from.id, "-", ctx.message.text || ""));

// –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç (–ø–æ–∑–∂–µ)" ‚Äî —à–ª—ë–º —Å—Å—ã–ª–∫—É
bot.hears("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç (–ø–æ–∑–∂–µ)", (ctx) => {
  ctx.reply("–ö–∞–±–∏–Ω–µ—Ç: http://localhost:3000/");
});

// –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –∫–æ–º–∞–Ω–¥–∞ /open –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ
bot.command("open", (ctx) => ctx.reply("–ö–∞–±–∏–Ω–µ—Ç: http://localhost:3000/"));
// –∫–æ–º–∞–Ω–¥–∞ /app ‚Äî –ø—Ä–∏—Å—ã–ª–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–±–∏–Ω–µ—Ç
bot.command("app", (ctx) => ctx.reply("–ö–∞–±–∏–Ω–µ—Ç: http://localhost:3000/app"));

// –∫–æ–º–∞–Ω–¥–∞ /menu ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä–æ–µ—Ç –∫–∞–±–∏–Ω–µ—Ç –≤–Ω—É—Ç—Ä–∏ –¢–µ–ª–µ–≥–∏
bot.command("menu", async (ctx) => {
  const kb = new Keyboard()
    .webApp("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç", "http://localhost:3000/app")
    .resized();
  await ctx.reply("–ú–µ–Ω—é:", { reply_markup: kb });
});
// –∫–æ–º–∞–Ω–¥–∞ /brief ‚Äî –ø—Ä–∏—Å—ã–ª–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É –±—Ä–∏—Ñ–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ–º–µ–Ω)
bot.command("brief", (ctx) =>
  ctx.reply("–ë—Ä–∏—Ñ: https://tg-prod-cabinet-production.up.railway.app/brief")
);

// –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞
bot.start();

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(PORT, () => {
  console.log(`‚úÖ Web server on http://localhost:${PORT}`);
  console.log("ü§ñ Bot polling started");
});
