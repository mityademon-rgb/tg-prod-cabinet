import dotenv from "dotenv";
dotenv.config();

import express from "express";
import { Bot, Keyboard } from "grammy";

const PORT = process.env.PORT || 3000;
const token = process.env.TELEGRAM_TOKEN;

if (!token) {
  console.error("‚õî –í .env –Ω–µ—Ç TELEGRAM_TOKEN");
  process.exit(1);
}

// --- Express (–ø—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫) ---
const app = express();
app.use(express.urlencoded({ extended: true })); // —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ <form>


app.get("/", (_req, res) => res.send("–°–µ—Ä–≤–µ—Ä –∂–∏–≤ ‚úÖ"));
app.get("/health", (_req, res) => res.json({ ok: true, t: Date.now() }));
// —Å—Ç—Ä–∞–Ω–∏—Ü–∞ "–ö–∞–±–∏–Ω–µ—Ç" –ø–æ –∞–¥—Ä–µ—Å—É /app
app.get("/app", (_req, res) => {
  res.send(<!doctype html>
<html lang="ru">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>–ö–∞–±–∏–Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞</title>
<script src="https://telegram.org/js/telegram-web-app.js"></script>
<style>
  :root{
    --bg:#0f1115; --text:#e9edf3; --muted:#aab3c2; --card:#161a22; --brand:#f37021; --ok:#21c97a; --line:rgba(255,255,255,.08)
  }
  *{box-sizing:border-box}
  html,body{margin:0;height:100%}
  body{background:var(--bg);color:var(--text);font:15px/1.5 system-ui,Segoe UI,Roboto,Arial}
  .wrap{max-width:920px;margin:0 auto;padding:16px 16px 28px}
  h1{margin:0 0 10px;font-size:22px}
  .muted{color:var(--muted)}
  .card{background:var(--card);border:1px solid var(--line);border-radius:16px;padding:14px;margin:12px 0}
  .row{display:flex;gap:8px;flex-wrap:wrap}
  .chip{padding:6px 10px;border-radius:999px;background:#0f1219;border:1px solid var(--line)}
  .chip.ok{background:rgba(33,201,122,.15);border-color:rgba(33,201,122,.35)}
  .btn{display:inline-block;background:var(--brand);color:#fff;text-decoration:none;border-radius:12px;padding:12px 16px;font-weight:700}
  .btn.ghost{background:transparent;color:var(--text);border:1px solid var(--line)}
  .grid{display:grid;gap:12px}
  @media(min-width:700px){.grid{grid-template-columns:1fr 1fr}}
</style>
</head>
<body>
  <div class="wrap">
    <h1>–ö–∞–±–∏–Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞</h1>
    <div class="muted" id="hello">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</div>

    <div class="grid">
      <div class="card">
        <h3>–®–∞–≥–∏ –ø—Ä–æ–µ–∫—Ç–∞</h3>
        <div class="row" id="steps">
          <span class="chip"   id="s1">–ë—Ä–∏—Ñ</span>
          <span class="chip"   id="s2">–°–º–µ—Ç–∞</span>
          <span class="chip"   id="s3">–ö–æ–Ω—Ü–µ–ø—Ü–∏–∏</span>
          <span class="chip"   id="s4">–ü—Ä–æ–¥–∞–∫—à–Ω</span>
          <span class="chip"   id="s5">–ß–µ—Ä–Ω–æ–≤–∏–∫</span>
          <span class="chip"   id="s6">–§–∏–Ω–∞–ª</span>
        </div>
        <p class="muted" id="status">–°—Ç–∞—Ç—É—Å: –∂–¥—É –±—Ä–∏—Ñ üìÑ</p>
      </div>

      <div class="card">
        <h3>–î–µ–π—Å—Ç–≤–∏—è</h3>
        <p class="row">
          <a class="btn" href="/brief-template.docx">–°–∫–∞—á–∞—Ç—å –±—Ä–∏—Ñ (DOCX)</a>
          <button class="btn ghost" onclick="openChat()">–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</button>
        </p>
        <p class="muted">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç –±–æ—Ç—É.</p>
      </div>
    </div>

    <div class="card">
      <h3>–ú–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</h3>
      <p class="muted">–ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Å–º–µ—Ç–∞, –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–æ–ª–∏–∫–∏, –∫–æ–≥–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Ö –æ–ø—É–±–ª–∏–∫—É–µ—Ç.</p>
      <div id="materials"></div>
    </div>
  </div>

<script>
  const tg = window.Telegram?.WebApp;
  if (tg) {
    tg.expand();
    const tp = tg.themeParams || {};
    // –ù–µ–∂–Ω–æ –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–µ–º—É –¢–µ–ª–µ–≥–∏
    const map = {
      '--bg': tp.bg_color,
      '--text': tp.text_color,
      '--muted': tp.hint_color,
      '--card': tp.secondary_bg_color,
      '--brand': tp.button_color
    };
    for (const k in map) if (map[k]) document.documentElement.style.setProperty(k, map[k]);
    const u = tg.initDataUnsafe?.user;
    if (u?.first_name) document.getElementById('hello').textContent = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${u.first_name}!`;
  }
  function openChat(){ tg ? tg.close() : (location.href='https://t.me') }

  // –í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–µ–º–æ-—Å—Ç–∞—Ç—É—Å (–ø–æ–∑–∂–µ —Ç—É—Ç –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API)
  const STAGE_TEXT = {
    waiting_brief: "–ñ–¥—É –±—Ä–∏—Ñ üìÑ",
    brief_received: "–ë—Ä–∏—Ñ –ø–æ–ª—É—á–µ–Ω ‚úÖ. –°—á–∏—Ç–∞–µ–º —Å–º–µ—Ç—É üí∞",
    estimate_ready: "–°–º–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ üíº",
    estimate_approved: "–°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ",
    concepts_ready: "–ö–æ–Ω—Ü–µ–ø—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã üé¨"
  };
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî ¬´–∂–¥—É –±—Ä–∏—Ñ¬ª
  let stage = 'waiting_brief';
  document.getElementById('status').textContent = "–°—Ç–∞—Ç—É—Å: " + STAGE_TEXT[stage];
  document.getElementById('s1').classList.add('ok'); // –ø–æ–¥—Å–≤–µ—Ç–∏–º –ø–µ—Ä–≤—ã–π —à–∞–≥
</script>
</body>
</html>
);
});
// —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ë–†–ò–§–ê (GET /brief)
app.get("/brief", (_req, res) => {
  res.send(`<!doctype html><html lang="ru"><head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>–ë—Ä–∏—Ñ</title></head>
<body style="font:16px system-ui;max-width:760px;margin:40px auto;line-height:1.5">
  <h1>–ë—Ä–∏—Ñ –Ω–∞ –≤–∏–¥–µ–æ</h1>
  <form method="post" action="/brief">
    <p><label>–ö–æ–º–ø–∞–Ω–∏—è/–±—Ä–µ–Ω–¥<br><input name="company" required style="width:100%;padding:8px"></label></p>
    <p><label>–¶–µ–ª—å —Ä–æ–ª–∏–∫–∞<br><textarea name="goal" required style="width:100%;height:120px;padding:8px"></textarea></label></p>
    <p><label>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è<br><input name="audience" style="width:100%;padding:8px"></label></p>
    <p><label>–†–µ—Ñ–µ—Ä–µ–Ω—Å—ã (—Å—Å—ã–ª–∫–∏)<br><textarea name="refs" style="width:100%;height:80px;padding:8px"></textarea></label></p>
    <p><button type="submit" style="padding:10px 14px;font-weight:700">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±—Ä–∏—Ñ</button></p>
  </form>
  <p><a href="/app">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç</a></p>
</body></html>`);
});

// –ø—Ä–∏—ë–º —Ñ–æ—Ä–º—ã (POST /brief)
app.post("/brief", async (req, res) => {
  console.log("üìù –ù–æ–≤—ã–π –±—Ä–∏—Ñ:", req.body); 
   // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ Telegram (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id)
  const managerId = process.env.MANAGER_CHAT_ID;
  if (managerId) {
    const b = req.body || {};
    const msg =
      `<b>–ù–æ–≤—ã–π –±—Ä–∏—Ñ</b>\n` +
      `–ö–æ–º–ø–∞–Ω–∏—è: ${b.company || "-"}\n` +
      `–¶–µ–ª—å: ${b.goal || "-"}\n` +
      `–¶–ê: ${b.audience || "-"}\n` +
      `–†–µ—Ñ—ã: ${b.refs || "-"}\n` +
      `–ö–æ–Ω—Ç–∞–∫—Ç: ${b.contact || "-"}; ${b.contact_way || "-"}`;

    try {
      await bot.api.sendMessage(Number(managerId), msg, { parse_mode: "HTML" });
    } catch (e) {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:", e.message);
    }
  }

  res.send(`<!doctype html><meta charset="utf-8">
  <body style="font:16px system-ui;max-width:760px;margin:40px auto">
    <h1>–°–ø–∞—Å–∏–±–æ! –ë—Ä–∏—Ñ –ø–æ–ª—É—á–µ–Ω ‚úÖ</h1>
    <p><a href="/app">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç</a></p>
  </body>`);
});

// --- Telegram Bot ---
const bot = new Bot(token);

bot.command("start", async (ctx) => {
  const kb = new Keyboard().text("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç (–ø–æ–∑–∂–µ)").resized();
  await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || "–¥—Ä—É–≥"}! –Ø –Ω–∞ —Å–≤—è–∑–∏ ‚úÖ`, { reply_markup: kb });
});

bot.command("ping", (ctx) => ctx.reply("pong ‚úÖ"));
bot.on("message", (ctx) => console.log("üì©", ctx.from.id, "-", ctx.message.text || ""));

// –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç (–ø–æ–∑–∂–µ)" ‚Äî —à–ª—ë–º —Å—Å—ã–ª–∫—É
bot.hears("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç (–ø–æ–∑–∂–µ)", (ctx) => {
  ctx.reply("–ö–∞–±–∏–Ω–µ—Ç: http://localhost:3000/");
});

// –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –∫–æ–º–∞–Ω–¥–∞ /open –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ
bot.command("open", (ctx) => ctx.reply("–ö–∞–±–∏–Ω–µ—Ç: http://localhost:3000/"));
// –∫–æ–º–∞–Ω–¥–∞ /app ‚Äî –ø—Ä–∏—Å—ã–ª–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–±–∏–Ω–µ—Ç
bot.command("app", (ctx) => ctx.reply("–ö–∞–±–∏–Ω–µ—Ç: http://localhost:3000/app"));

// –∫–æ–º–∞–Ω–¥–∞ /menu ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä–æ–µ—Ç –∫–∞–±–∏–Ω–µ—Ç –≤–Ω—É—Ç—Ä–∏ –¢–µ–ª–µ–≥–∏
bot.command("menu", async (ctx) => {
  const kb = new Keyboard()
    .webApp("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç", "http://localhost:3000/app")
    .resized();
  await ctx.reply("–ú–µ–Ω—é:", { reply_markup: kb });
});
// –∫–æ–º–∞–Ω–¥–∞ /brief ‚Äî –ø—Ä–∏—Å—ã–ª–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É
bot.command("brief", (ctx) =>
  ctx.reply("–ë—Ä–∏—Ñ: https://tg-prod-cabinet-production.up.railway.app/brief")
);
// –ø–æ–∫–∞–∂—É —Ç–≤–æ–π chat_id, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
bot.command("myid", (ctx) => ctx.reply(`–í–∞—à chat_id: ${ctx.chat.id}`));
// /notifytest ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É
bot.command("notifytest", async (ctx) => {
  try {
    await bot.api.sendMessage(Number(process.env.MANAGER_CHAT_ID || 0),
      `–¢–µ—Å—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚úÖ –æ—Ç ${ctx.from.id}`);
    await ctx.reply("–û—Ç–ø—Ä–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚úÖ");
  } catch (e) {
    await ctx.reply("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: " + e.message);
    console.error("notifytest error:", e);
  }
});
// /notifytest ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä—É
bot.command("notifytest", async (ctx) => {
  console.log("üîî /notifytest from", ctx.from.id);
  try {
    await ctx.reply("–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞, —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ‚Ä¶");
    await bot.api.sendMessage(
      Number(process.env.MANAGER_CHAT_ID || 0),
      `–¢–µ—Å—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚úÖ –æ—Ç ${ctx.from.id}`
    );
  } catch (e) {
    console.error("notifytest error:", e);
    await ctx.reply("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: " + e.message);
  }
});

// –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ .command –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
bot.hears(/^\/notifytest\b/i, async (ctx) => {
  console.log("üîî hears /notifytest from", ctx.from.id);
  try {
    await ctx.reply("–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞ (hears), —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ‚Ä¶");
    await bot.api.sendMessage(
      Number(process.env.MANAGER_CHAT_ID || 0),
      `–¢–µ—Å—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚úÖ (hears) –æ—Ç ${ctx.from.id}`
    );
  } catch (e) {
    console.error("notifytest-hears error:", e);
  }
});
// /menu ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–±–∏–Ω–µ—Ç –∫–∞–∫ WebApp –ø—Ä—è–º–æ –≤ Telegram
bot.command("menu", async (ctx) => {
  const kb = new Keyboard()
    .webApp("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç", "https://tg-prod-cabinet-production.up.railway.app/app")
    .resized();
  await ctx.reply("–ú–µ–Ω—é:", { reply_markup: kb });
});

// –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞
bot.start();

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(PORT, () => {
  console.log(`‚úÖ Web server on http://localhost:${PORT}`);
  console.log("ü§ñ Bot polling started");
});
